{"version":3,"sources":["components/ContactsList/ContactsList.module.css","components/SearchForm/SearchForm.module.css","components/style.module.css","components/Filter/Filter.module.css","components/ContactsList/pop.module.css","components/Notify/Notify.module.css","transition/message.module.css","transition/pop.module.css","redux/contacts/contactsReducer.js","redux/contacts/contactsTypes.js","redux/filter/filterReducer.js","redux/filter/filterTypes.js","redux/rootReducer.js","redux/store.js","services/LS.js","redux/contacts/contactsAction.js","redux/selectors.js","components/SearchForm/SearchForm.jsx","components/SearchForm/SearchFormContainer.jsx","components/ContactsList/Contact.jsx","components/ContactsList/ContactsList.jsx","components/ContactsList/ContactListContainer.jsx","components/Notify/Notify.jsx","redux/filter/filterActions.js","components/Filter/Filter.jsx","components/Filter/FilterContainer.jsx","components/PhoneBook.jsx","components/App.jsx","index.js"],"names":["module","exports","contactReducer","createReducer","contacts","state","action","payload","filter","el","id","notifyReducer","filterReducer","rootReducer","combineReducers","reducer","notify","persistedState","loadState","localStorage","getItem","JSON","parse","err","loadStateFromLS","store","configureStore","preloadedState","subscribe","existedData","stringify","setItem","alert","saveToLS","getState","addContactAction","createAction","removeContactAction","setContactsToLocalStorage","showNotify","getContacts","getFilter","getFilteredContacts","createSelector","searchValue","name","toLowerCase","includes","getNotifyText","INIT_STATE","number","SearchForm","handleChange","e","setState","target","value","handleSubmit","preventDefault","message","props","showNotifyMessage","hideNotify","setTimeout","find","contact","onChangeSubmit","shortid","generate","Number","reset","contactsFromLS","setContactsFromLS","this","className","styles","form","onSubmit","htmlFor","nameInputId","input","placeholder","type","onChange","numberInputId","button","Component","connect","selectors","dispatch","data","contactActions","text","Contact","onDeleteContact","container","onClick","ContactsList","TransitionGroup","component","contactList","map","CSSTransition","key","timeout","enter","exit","unmountOnExit","classNames","pop","ContactsListItem","Notify","title","filterAction","Filter","onChangeFilter","FilterForm","filterActions","in","appear","length","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.296fe3c3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactsList_contactList__2mxFE\",\"ContactsListItem\":\"ContactsList_ContactsListItem__KmIrl\",\"button\":\"ContactsList_button__N8L7x\",\"container\":\"ContactsList_container__13AR4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"SearchForm_form__2X9DX\",\"input\":\"SearchForm_input__2GUp7\",\"button\":\"SearchForm_button__3VmeW\",\"Header-appear\":\"SearchForm_Header-appear__EROcC\",\"Header-appear-active\":\"SearchForm_Header-appear-active__1Rzcq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__3xPYq\",\"title\":\"style_title__1djQE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__3wC-f\",\"FilterForm\":\"Filter_FilterForm__I3Wtf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__2k2iN\",\"enterActive\":\"pop_enterActive__3AmJO\",\"exit\":\"pop_exit__24wnp\",\"exitActive\":\"pop_exitActive__cRmod\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Notify_title__2FZ23\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"message_enter__1Cp9w\",\"enterActive\":\"message_enterActive__3iXfk\",\"exit\":\"message_exit__8z90h\",\"exitActive\":\"message_exitActive__1EfYc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__3pW8X\",\"enterActive\":\"pop_enterActive__1guUR\",\"exit\":\"pop_exit__2n9wp\",\"exitActive\":\"pop_exitActive__3MrbE\"};","// toolkit;\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport * as types from './contactsTypes';\r\n\r\nconst initial = {\r\n  contacts: [],\r\n};\r\n\r\nexport const contactReducer = createReducer(initial, {\r\n  [types.ADD_CONTACT]: (state, action) => {\r\n    return { ...state, contacts: [action.payload, ...state.contacts] };\r\n  },\r\n  [types.DELETE_CONTACT]: (state, action) => {\r\n    return { ...state, contacts: state.contacts.filter(el => el.id !== action.payload) };\r\n  },\r\n});\r\n\r\nexport const notifyReducer = createReducer('', {\r\n  [types.SHOW_NOTIFY]: (state, action) => {\r\n    return action.payload;\r\n  },\r\n});\r\n\r\n// import * as types from './contactsAppTypes';\r\n\r\n// const initial = {\r\n//   contacts: [],\r\n// };\r\n\r\n// export const contactReducer = (state = initial, { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD_CONTACT: {\r\n//       const addContact = [payload.contact, ...state.contacts];\r\n//       localStorage.setItem('contacts', JSON.stringify(addContact));\r\n//       return { contacts: addContact };\r\n//     }\r\n//     case types.REMOVE_CONTACT: {\r\n//       const removeContact = state.contacts.filter(el => el.id !== payload.id);\r\n//       localStorage.setItem('contacts', JSON.stringify(removeContact));\r\n//       return { contacts: removeContact };\r\n//     }\r\n//     case types.SET_TO_LOCAL_STORAGE: {\r\n//       return { contacts: payload.contact };\r\n//     }\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export const notifyReducer = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.SHOW_NOTIFY:\r\n//       return payload.text;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","export const ADD_CONTACT = 'contact/ADD_CONTACT';\r\nexport const DELETE_CONTACT = 'contact/DELETE_CONTACT';\r\nexport const SET_TO_LOCAL_STORAGE = 'contact/SET_TO_LOCAL_STORAGE';\r\nexport const SHOW_NOTIFY = 'contact/SHOW_NOTIFY';\r\n","// toolkit\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport * as types from './filterTypes';\r\n\r\nconst filterReducer = createReducer('', {\r\n  [types.FILTERED]: (state, action) => {\r\n    return action.payload;\r\n  },\r\n});\r\n\r\nexport default filterReducer;\r\n\r\n// import * as types from './filterTypes';\r\n\r\n// const filterReducer = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.FILTERED:\r\n//       return payload.filter;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export default filterReducer;\r\n","export const FILTERED = 'filter/FILTERED';\r\n","import { combineReducers } from 'redux';\r\nimport * as reducer from './contacts/contactsReducer';\r\nimport filterReducer from './filter/filterReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: reducer.contactReducer,\r\n  filter: filterReducer,\r\n  notify: reducer.notifyReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","// before toolkit\r\n\r\n// import { createStore } from 'redux';\r\n// import rootReducer from './rootReducer';\r\n// import { devToolsEnhancer } from 'redux-devtools-extension';\r\n\r\n// const store = createStore(rootReducer, devToolsEnhancer());\r\n// console.log(store);\r\n\r\n// export default store;\r\n\r\n// toolkit\r\n\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport rootReducer from './rootReducer';\r\nimport { saveToLS, loadStateFromLS } from '../services/LS';\r\n\r\nconst persistedState = loadStateFromLS();\r\n\r\nconst store = configureStore({ reducer: rootReducer, preloadedState: persistedState });\r\nstore.subscribe(() => saveToLS(store.getState()));\r\n\r\nexport default store;\r\n","export function saveToLS(state) {\r\n  try {\r\n    const existedData = JSON.stringify(state);\r\n    localStorage.setItem('state', existedData);\r\n  } catch {\r\n    alert('Error');\r\n  }\r\n}\r\n\r\nexport function loadStateFromLS() {\r\n  try {\r\n    const loadState = localStorage.getItem('state');\r\n\r\n    if (loadState === null) {\r\n      return undefined;\r\n    }\r\n\r\n    return JSON.parse(loadState);\r\n  } catch (err) {\r\n    return undefined;\r\n  }\r\n}\r\n","// toolkit\r\nimport { createAction } from '@reduxjs/toolkit';\r\nimport * as types from './contactsTypes';\r\n\r\nexport const addContactAction = createAction(types.ADD_CONTACT);\r\nexport const removeContactAction = createAction(types.DELETE_CONTACT);\r\nexport const setContactsToLocalStorage = createAction(types.SET_TO_LOCAL_STORAGE);\r\nexport const showNotify = createAction(types.SHOW_NOTIFY);\r\n\r\n// import * as types from './contactsAppTypes';\r\n\r\n// export const addContactAction = data => ({\r\n//   type: types.ADD_CONTACT,\r\n//   payload: {\r\n//     contact: data,\r\n//   },\r\n// });\r\n\r\n// export const removeContactAction = id => ({\r\n//   type: types.REMOVE_CONTACT,\r\n//   payload: {\r\n//     id: id,\r\n//   },\r\n// });\r\n\r\n// export const setContactsToLocalStorage = contact => ({\r\n//   type: types.SET_TO_LOCAL_STORAGE,\r\n//   payload: {\r\n//     contact: contact,\r\n//   },\r\n// });\r\n\r\n// export const showNotify = text => ({\r\n//   type: types.SHOW_NOTIFY,\r\n//   payload: {\r\n//     text,\r\n//   },\r\n// });\r\n","import { createSelector } from 'reselect';\r\n\r\nexport const getContacts = store => store.contacts.contacts;\r\nexport const getFilter = store => store.filter;\r\n\r\nexport const getFilteredContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, searchValue) =>\r\n    contacts.filter(el => el.name.toLowerCase().includes(searchValue.toLowerCase())),\r\n);\r\nexport const getNotifyText = store => store.notify;\r\n","import React, { Component } from 'react';\nimport shortid from 'shortid';\nimport styles from './SearchForm.module.css';\n\nconst INIT_STATE = { name: '', number: '' };\n\nclass SearchForm extends Component {\n  state = {\n    ...INIT_STATE,\n  };\n\n  componentDidMount() {\n    const contactsFromLS = localStorage.getItem('contacts');\n    if (contactsFromLS) {\n      const { setContactsFromLS } = this.props;\n      setContactsFromLS(JSON.parse(contactsFromLS));\n    }\n  }\n\n  handleChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const { name, number } = this.state;\n    const { contacts, showNotifyMessage } = this.props;\n\n    const isPresentContact = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n\n    let message;\n\n    const hideNotify = () => {\n      showNotifyMessage(message);\n      setTimeout(() => showNotifyMessage(''), 1500);\n    };\n\n    if (isPresentContact) {\n      message = `${name} is already in contacts`;\n      hideNotify();\n    } else if (name && number) {\n      this.props.onChangeSubmit({\n        id: shortid.generate(),\n        name: this.state.name,\n        number: Number(this.state.number),\n      });\n    } else {\n      message = 'Fill in the field please!';\n      hideNotify();\n    }\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({\n      ...INIT_STATE,\n    });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <div>\n        <form className={styles.form} onSubmit={this.handleSubmit}>\n          <label htmlFor={name.nameInputId}>\n            Name\n            <input\n              className={styles.input}\n              placeholder=\"Add Contact\"\n              type=\"text\"\n              value={name}\n              onChange={this.handleChange}\n              id={name.nameInputId}\n              name=\"name\"\n            />\n          </label>\n          <label htmlFor={name.numberInputId}>\n            Number\n            <input\n              className={styles.input}\n              placeholder=\"Add phone\"\n              type=\"number\"\n              value={number}\n              onChange={this.handleChange}\n              id={name.numberInputId}\n              name=\"number\"\n            />\n          </label>\n          <button className={styles.button} type=\"submit\">\n            Add contacts\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SearchForm;\n","import { connect } from 'react-redux';\r\nimport * as contactActions from '../../redux/contacts/contactsAction';\r\nimport * as selectors from '../../redux/selectors';\r\nimport SearchForm from './SearchForm';\r\n\r\nconst mapStateToProps = store => ({\r\n  contacts: selectors.getContacts(store),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChangeSubmit: data => dispatch(contactActions.addContactAction(data)),\r\n  showNotifyMessage: text => dispatch(contactActions.showNotify(text)),\r\n  setContactsFromLS: contact =>\r\n    dispatch(contactActions.setContactsToLocalStorage(contact)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchForm);\r\n","import React from 'react';\nimport T from 'prop-types';\nimport styles from './ContactsList.module.css';\n\nconst Contact = ({ contact, onDeleteContact }) => (\n  <div>\n    <p className={styles.container}>\n      {contact.name}:<span>{contact.number}</span>\n      <button onClick={onDeleteContact} className={styles.button} type=\"button\">\n        Delete\n      </button>\n    </p>\n  </div>\n);\n\nContact.propTypes = {\n  contact: T.shape({\n    name: T.string.isRequired,\n    number: T.number.isRequired,\n  }).isRequired,\n  onDeleteContact: T.func.isRequired,\n};\n\nexport default Contact;\n","import React from 'react';\nimport T from 'prop-types';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport Contact from './Contact';\n\nimport styles from './ContactsList.module.css';\nimport pop from './pop.module.css';\n\nconst ContactsList = ({ contacts, onDeleteContact }) => (\n  <TransitionGroup component=\"ul\" className={styles.contactList}>\n    {contacts.map(contact => (\n      <CSSTransition\n        key={contact.id}\n        timeout={{ enter: 750, exit: 850 }}\n        unmountOnExit\n        classNames={pop}\n      >\n        <li className={styles.ContactsListItem} key={contact.id}>\n          <Contact\n            contact={contact}\n            onDeleteContact={() => onDeleteContact(contact.id)}\n          />\n        </li>\n      </CSSTransition>\n    ))}\n  </TransitionGroup>\n);\n\nContactsList.propTypes = {\n  contacts: T.arrayOf(T.shape({})).isRequired,\n  onDeleteContact: T.func.isRequired,\n};\n\nexport default ContactsList;\n","import { connect } from 'react-redux';\r\nimport * as contactActions from '../../redux/contacts/contactsAction';\r\nimport * as selectors from '../../redux/selectors';\r\nimport ContactsList from './ContactsList';\r\n\r\nconst mapStateToProps = store => ({\r\n  contacts: selectors.getFilteredContacts(store),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: id => dispatch(contactActions.removeContactAction(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\r\n","import React from 'react';\nimport T from 'prop-types';\nimport styles from './Notify.module.css';\n\nconst Notify = ({ message }) => <h2 className={styles.title}>{message}</h2>;\n\nNotify.propTypes = {\n  message: T.string.isRequired,\n};\n\nexport default Notify;\n","// toolkit\r\nimport { createAction } from '@reduxjs/toolkit';\r\nimport * as types from './filterTypes';\r\n\r\nconst filterAction = createAction(types.FILTERED);\r\nexport default filterAction;\r\n\r\n// import * as types from './filterTypes';\r\n\r\n// const filterAction = value => ({\r\n//   type: types.FILTERED,\r\n//   payload: {\r\n//     filter: value,\r\n//   },\r\n// });\r\n// export default filterAction;\r\n","import React from 'react';\nimport T from 'prop-types';\nimport styles from './Filter.module.css';\n\nconst Filter = ({ value, onChangeFilter }) => (\n  <div className={styles.FilterForm}>\n    <label>\n      Find contacts by name\n      <input\n        value={value}\n        onChange={e => onChangeFilter(e.target.value)}\n        className={styles.input}\n        placeholder=\"Contact\"\n        type=\"text\"\n      />\n    </label>\n  </div>\n);\n\nFilter.propTypes = {\n  value: T.string.isRequired,\n  onChangeFilter: T.func.isRequired,\n};\n\nexport default Filter;\n","import filterActions from '../../redux/filter/filterActions';\r\nimport { connect } from 'react-redux';\r\nimport * as selectors from '../../redux/selectors';\r\nimport Filter from './Filter';\r\n\r\nconst mapStateToProps = store => ({\r\n  value: selectors.getFilter(store),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChangeFilter: value => dispatch(filterActions(value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport T from 'prop-types';\n// components\nimport SearchForm from './SearchForm/SearchFormContainer';\nimport ContactsList from './ContactsList/ContactListContainer';\nimport Notify from './Notify/Notify';\nimport Filter from './Filter/FilterContainer';\n// transition\nimport '../transition/fade.css';\nimport '../transition/slide.css';\nimport message from '../transition/message.module.css';\nimport pop from '../transition/pop.module.css';\n// css\nimport styles from './style.module.css';\nimport { connect } from 'react-redux';\nimport * as selectors from '../redux/selectors';\n\nconst PhoneBook = ({ contacts, text }) => {\n  return (\n    <CSSTransition in timeout={1000} classNames=\"fade\" appear>\n      <div className={styles.container}>\n        <CSSTransition in timeout={2000} classNames=\"slide\" appear>\n          <h2 className={styles.title}>PhoneBook</h2>\n        </CSSTransition>\n        <TransitionGroup>\n          {text && (\n            <CSSTransition\n              timeout={{ enter: 250, exit: 750 }}\n              classNames={message}\n              unmountOnExit\n            >\n              <Notify message={text} />\n            </CSSTransition>\n          )}\n        </TransitionGroup>\n        <SearchForm />\n        {contacts.length > 0 && <h2 className={styles.title}>Contacts</h2>}\n        <TransitionGroup>\n          {contacts.length > 1 && (\n            <CSSTransition timeout={{ enter: 250, exit: 1000 }} classNames={pop}>\n              <Filter />\n            </CSSTransition>\n          )}\n        </TransitionGroup>\n        <ContactsList />\n      </div>\n    </CSSTransition>\n  );\n};\n\nPhoneBook.propTypes = {\n  contacts: T.arrayOf(\n    T.shape({\n      name: T.string.isRequired,\n      number: T.number.isRequired,\n      id: T.string.isRequired,\n    }),\n  ).isRequired,\n  text: T.string.isRequired,\n};\n\nconst mapStateToProps = store => ({\n  contacts: selectors.getContacts(store),\n  text: selectors.getNotifyText(store),\n});\n\nexport default connect(mapStateToProps, null)(PhoneBook);\n","import React from 'react';\r\nimport PhoneBook from './PhoneBook';\r\n\r\nconst App = () => <PhoneBook />;\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport App from './components/App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}